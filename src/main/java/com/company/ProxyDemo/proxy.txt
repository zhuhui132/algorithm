代理模式是常用的java设计模式，
他的特征是代理类与委托类有同样的接口，代
理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，
以及事后处理消息等。代理类与委托类之间通常会存在关联关系，
一个代理类的对象与一个委托类的对象关联，
代理类的对象本身并不真正实现服务，
而是通过调用委托类的对象的相关方法，
来提供特定的服务。简单的说就是，我们在访问实际对象时，
是通过代理对象来访问的，
代理模式就是在访问实际对象时引入一定程度的间接性，
因为这种间接性，可以附加多种用途





 代理类在程序运行时创建的代理方式被成为动态代理。
  我们上面静态代理的例子中，代理类(studentProxy)是自己定义好的，
  在程序运行之前就已经编译完成。然而动态代理，
  代理类并不是在Java代码中定义的，
  而是在运行时根据我们在Java代码中的“指示”动态生成的。
  相比于静态代理，
  动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，
  而不用修改每个代理类中的方法。
 比如说，想要在每个代理的方法前都加上一个处理方法：